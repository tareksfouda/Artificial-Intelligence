import java.util.Random;

public class Simulation {

//instance variables
    int jobscompleted =0;
    int jobsmigratedsuccessfully = 0;
    int jobsfailedtomigrate = 0;
    int[] Array_first_spot_of_cluster = new int[65];
    int failedToFindParking =0;
    static int timetostopSimulation = 1440;       // the simulation will run for one day, 24 hours, 1440mins
    int spot_var;
    static double HD_bandwidth = 12000;   // The disk bandwidth 54MB/s is expressed in minutes. 
    int jobfailCounter=0, jobPassCounter=0;
 
    public class Time
    {
        int minute;

        Time(){
            minute = 0;
        }

        void increment(){
            minute++;
        }

    }
    
    public  class parkingSpot  //This class includes all information about the parking spots and also it keeps track of whether parking spot is occupied or not.
    {


        int spot_id;
        int cluster_number;
        int region_number;
        int group_center_number;
        int occupied; // 1 if yes and 0 if no
        int carIdOccupyThisSpot;

        public void parkingSpots(int spot_id, int cluster_number, int region_number, int group_center_number, int occupied)
    {
        this.spot_id = spot_id;
        this.cluster_number = cluster_number;
        this.region_number = region_number;
        this.group_center_number = group_center_number;
        this.occupied = occupied;
    }

        public void spot_ToString()                    // tostring for spot in the parking lots information
        {
            System.out.println("\n");
            System.out.println("************"+"\n");
            System.out.println("		Spot Information		        "+"\n");
            System.out.println("**************"+"\n");
            System.out.println("Spot number : "+spot_id+"\n");
            System.out.println("Cluster number : "+cluster_number+"\n");
            System.out.println("Region number : "+region_number+"\n");
            System.out.println("Group Center number : "+group_center_number+"\n");
            System.out.println("Occupied : "+occupied+"\n");
        }


    }

   

    public class cars   // This includes information about all the cars(employees) including which spot the car is currently parked, along with arrival and departure time.
    { //their number is supposedto be 7680 cars in total
        int car_id;
        int car_assignedSpotNumber;//spotnumber assigned to this specific car
        int carArrivalTime;  // it is probably given as an input file from the user
        int departure_time;  // departure timeis usually arrival time+ 8 hours
        int job_number; // job assigned to the car
        int timeSpenInThePlant;
        int turned_away;
        boolean busy;          // true if this car has a job and false if it does not
        boolean nojobsmigrated;
        
       public cars()
        {
            turned_away=-1;    // Initially set to -1.
            // turned_away=0 means Car didn't turn away orit actually found a parking space.
            // turned_away=1 - Car turned away
            car_assignedSpotNumber=-1; // initially no spot assigned toit at all
            nojobsmigrated=false;
        }

        public void carToString()  // Displays all car information 
        {          
            System.out.println("\n");
            System.out.println("**********"+"\n");
            System.out.println("		Car Details		        "+"\n");
            System.out.println("***********"+"\n");
            System.out.println("car number : "+car_id+"\n");
            System.out.println("car spot number : "+car_assignedSpotNumber+"\n");
            System.out.println("job number assigned to this car : "+job_number+"\n");
            System.out.println("this car arrived at : "+carArrivalTime+"\n");
            System.out.println("this car left at : "+departure_time+"\n");
            System.out.println("this car stayed there for(duration): "+timeSpenInThePlant+"\n");
            System.out.println("Car Turned away: "+turned_away+"\n");


        }






        public void calculate_departure_time(){        //Calculates the departure time of a car when simulation starts. This is between 1-2560 cars

            departure_time= carArrivalTime + (8*60);                            // departure time is after arrival time by 8 hours
        }

       public void get_carArrivalTime(ifstream& inFile){                 // Will take it as input file

            inFile>>departure_time_of_flight;
            carArrivalTime = departure_time_of_flight - 60;
        }
        public void get_departure_time_of_car(){

        	 departure_time= carArrivalTime + (8*60); // departure time is after arrival time by 8 hours
        }

        public void calculate_timeSpenInThePlant_of_car()                          //Calculates time stayed in the datacenter plant, which will be 8 hours.
        {
            timeSpenInThePlant = departure_time - carArrivalTime;
        }

        public void failedJobCarToString()    //This displays the details of a car which may fail if we don't do the migration.
        {
            System.out.println("\n");
            System.out.println("-----------------------------------------"+"\n");
            System.out.println("		Failed Job Car Details		        "+"\n");
            System.out.println("-----------------------------------------"+"\n");
            System.out.println("car ID : "+car_id+"\n");
            System.out.println("job number assigned to this car : "+job_number+"\n");
            System.out.println("departure time of this car : "+departure_time+"\n");
            System.out.println("arrival time of this car : "+carArrivalTime+"\n");

        }

        public void SuccessJobCarToString()    //This displays the details of a car which may pass during the simulation.
        {
            System.out.println("\n");
            System.out.println("-----------------------------------------"+"\n");
            System.out.println("		successful Job Car Details		        "+"\n");
            System.out.println("-----------------------------------------"+"\n");
            System.out.println("car ID : "+car_id+"\n");
            System.out.println("job number assigned to this car : "+job_number+"\n");
            System.out.println("departure time of this car : "+departure_time+"\n");
            System.out.println("arrival time of this car : "+carArrivalTime+"\n");

        }






    }
    public class jobs   // This class stores information about the jobs.
    {
        int car_id;  //car number that the job belongs to
        int job_id;
        double VM_size;
        boolean completed;
        boolean assigned;
        double job_duration;                                            // in minute
        double data_this_job_will_produce;
        double data_storage_time;
        double job_duration_remained;
        int data1_car_number;
        String replicated_data;
        int data2_car_number;
        int data3_car_number;
        int data_replication_time_to_same_cluster;
        int data_replication_time_to_same_region;
        int migrated_successfully; // 2 for success and 3 for fail

        jobs()
        {
            data_replication_time_to_same_cluster=0;
            data_replication_time_to_same_region=0;

        }


        void display_job_information()                 //This displays the job information which is assigned to all the cars in the parking lot as soon as simulation starts.
        {
            System.out.println("\n");
            System.out.println("-----------------------------------------"+"\n");
            System.out.println("		Job Details		        "+"\n");
            System.out.println("-----------------------------------------"+"\n");
            System.out.println("job number : "+job_id+"\n");
            System.out.println("job size : "+VM_size+"\n");
            System.out.println("car number that this job is assigned to : "+car_id+"\n");
            System.out.println("the amount of time this job takes to finish in minutes : "+job_duration+"\n");
            System.out.println("the amount of data that this job will produce : "+data_this_job_will_produce+"\n");
            System.out.println("the disk storage time: "+data_storage_time);

        }



        void calculate_VM_size(){
            VM_size= Math.random()%(3000-1000)+1000;                           // our jobs are between 1 GB and 5 GB
        }


        void calculate_data_size(){
            data_this_job_will_produce= VM_size * 4;                    //we assume that a VM of size x will produce 4x data
        }


        void calculate_data_storage_time(){                             // This function is to calculate the time it takes to store it to local hard disk of a car.
            data_storage_time = data_this_job_will_produce/HD_bandwidth;
        }


        void calculate_data_replication_time_to_same_cluster(){                            // Time it takes to replicate the data within same cluster.
            data_replication_time_to_same_cluster=(int)(data_this_job_will_produce/2)/600;     //In the Middle of the job, data will be replicated and it takes 10MB/sec link speed to transfer it to car in same cluster. The overall it takes 600MB per min.

        }


        void calculate_data_replication_time_to_same_region_different_cluster(){          //Time it takes to replicate the data to different cluster.
            data_replication_time_to_same_region= (int)((data_this_job_will_produce/2)/600 + (data_this_job_will_produce/2)/60000 + (data_this_job_will_produce/2)/600) ;
            // car ---> AP ___> GC ___> AP -----> car
        }


        void calculate_job_duration(){                                                    // Calculates the time it takes to complete a job in a car.
            job_duration= (VM_size * 0.1)+data_storage_time+data_replication_time_to_same_cluster+data_replication_time_to_same_region; //we assume that 1 MB takes 1/10 minute to finish and we added data storage time. In simple words, 6seconds to complete 1MB
            job_duration_remained = job_duration;
        }



    }

    
    
    
    
    
    
    
    
    
    parkingSpot[] spot_loc = new parkingSpot[2560];
    jobs[] jobs= new jobs[7680];
    cars[] cars_list = new cars[7680]; // number of cars in this plant



 // **************************** Main method and Initializing data**********************************


    public void initialize_array(){

        for(int i=0; i <=64; i++){

            Array_first_spot_of_cluster[i]=0;
        }

        Array_first_spot_of_cluster[1]=1;

        for(int i=2; i <=64; i++){

            Array_first_spot_of_cluster[i]=Array_first_spot_of_cluster[i-1] + 40;
        }


    }

    public int max_departure (int spotnumber,int spot_number_of_this_job)
    {
        int spot_num=spotnumber;
        for(int i=spotnumber+1;i<=spotnumber+39;i++)
        {
            if(i == spot_number_of_this_job)                                //This will skip the assigning the job to same car in the cluster.
            {

                continue;
            }

            if(cars_list[spot_num].departure_time <cars_list[i].departure_time)
                spot_num = i;

        }
        return cars_list[spot_num].car_id;
    }


    public int max_residency_not_busy_car(int time){                       //This will find a car with the maximum residency time that doesn't have a job assigned to it.

        int car_num = -1;
        int timeSpenInThePlant_temp= -1;
        for ( int i=1; i<=5000; i++){

            if(cars_list[i].busy == false && cars_list[i].departure_time > time && cars_list[i].car_assignedSpotNumber != -1 && cars_list[i].timeSpenInThePlant > timeSpenInThePlant_temp  ){

                timeSpenInThePlant_temp= cars_list[i].timeSpenInThePlant;
                car_num = cars_list[i].car_id;
            }

        }
        return car_num;

    }



    int generate_random_cluster_number_in_a_region(int GC_number_of_this_car, int spot_number_of_this_job, int cluster_number_of_this_car){

        int car_number = 0;
        int spot_number;
        int random_number;
        int random_cluster_number=0;
        int GC_num;

        initialize_array();

        random_number=1;
        for(GC_num=1;GC_num<=16;GC_num++)
        {
            if (GC_number_of_this_car==GC_num){

                //int random_cluster_number=cluster_number_of_this_car;
                random_cluster_number=0;

                do
                {
                    random_cluster_number= (int) (Math.random()%4 + random_number) ; //generate 1 to 4
                }while(random_cluster_number==cluster_number_of_this_car);

                car_number = max_departure(Array_first_spot_of_cluster[random_cluster_number],spot_number_of_this_job);

            }
            random_number=random_number + 4;

        }


        return car_number;
    }


    public void main()
    {
        int car_participation_count=0, total_cars_count=0;
        //srand(time(0));
        RegionCenter1();                                        //This will initialize the spot locations of all clusters belonging to region center1.
        RegionCenter2();                                        //This will initialize the spot locations of all clusters belonging to region center2.
        RegionCenter3();                                        //This will initialize the spot locations of all clusters belonging to region center3.
        RegionCenter4();                                        //This will initialize the spot locations of all clusters belonging to region center4.
        ifstream inFile,inFile2;
        inFile.open("input_departure_time_of_flight.txt");
        inFile2.open("input_arrival_time_of_flight.txt");



        // Assigning the carnumbers for all available 5000 cars
        for(int i=1; i<=7680; i++)
        {
            cars_list[i].car_id = i;
            cars_list[i].busy = false;



        }

        
        
        //Initialize all spot numbers, job numbers, departure time to all the cars
        for(int i=1; i<=2560; i++)
        {
            cars_list[i].car_assignedSpotNumber = spot_loc[i].spot_id;
            spot_loc[i].carIdOccupyThisSpot = i ;
            cars_list[i].job_number=i;
            cars_list[i].calculate_departure_time();
            cars_list[i].calculate_timeSpenInThePlant_of_car();
            cars_list[i].turned_away=0;
            cars_list[i].busy = true;

        }




        // Initialize -1 for cars outside the range of parking lot.
        for(int i=2561; i<=7680; i++)
        {
            cars_list[i].car_assignedSpotNumber = -1;

        }
        
        
        // Initialize all 5000 jobs for job class
        for(int i=1; i<=7680; i++)
        {
            jobs[i].job_id = i;
            jobs[i].calculate_VM_size();
            jobs[i].calculate_data_size();
            jobs[i].calculate_data_storage_time();
            jobs[i].calculate_data_replication_time_to_same_cluster();
            jobs[i].calculate_data_replication_time_to_same_region_different_cluster();
            jobs[i].calculate_job_duration();
            jobs[i].completed=false;
            jobs[i].assigned=false;

        }

        
        
        // Assigning jobs to cars and setting the assigned flag for job class.
        for(int i=1; i<=2560; i++)
        {

            if(cars_list[i].job_number==jobs[i].job_id){
                jobs[i].car_id=cars_list[i].car_id;
                jobs[i].assigned=true;
            }
            else
            {
                jobs[i].car_id=-1;
                jobs[i].assigned=false;
            }
        }

        // Getting the arrival time of car from the arrival list of flights from an input file.


        for(int i=2561; i<=7680; i++){

            cars_list[i].get_carArrivalTime(inFile);
            cars_list[i].get_departure_time_of_car(inFile2);
            cars_list[i].calculate_timeSpenInThePlant_of_car();
        }



        if(spot_loc[1].cluster_number>64)
        {
            spot_loc[1].spot_id=1;
            spot_loc[1].region_number=1;
            spot_loc[1].cluster_number=1;
            spot_loc[1].group_center_number=1;
            spot_loc[1].occupied=1;
        }


        // Displaying all car and job information
        for(int i=1; i<=7680; i++)
        {

            cars_list[i].carToString();
            int job_number = jobs[i].job_id;
            jobs[job_number].display_job_information();
            if(cars_list[i].departure_time <= timetostopSimulation)         // these are the cars that we can keep track of completely
            {
                car_participation_count++;
                cars_list[i].carToString();
                System.out.println("Count of Cars that we can completely keep track of : "+car_participation_count);
            }

            if(cars_list[i].carArrivalTime <= timetostopSimulation)
            {
                total_cars_count++;
                cars_list[i].carToString();
                //outFileTotalCarsArrived<<"Total Cars taken into account for the simulation: "<<total_cars_count<<endl;
            }


        }
        //Displays all spot information.

        for(int i=1;i<=2560;i++)
        {
            spot_loc[i].spot_ToString();
        }


        // Simulation time in minutes that is run for 24 hours which is equal to 1440 minutes.
        Time time = new Time();
        System.out.println( "\nTime is: " + time.minute);
        for (int i=1; i<=1440; i++){  //1440
            time.increment();
            System.out.println( "\nTime is: " + time.minute);
            // If simulation time in minutes exceeds the departure time of car then it means that car
            //has already left and need to initialize the spot location as -1 and job assigned should be set to false.
            for(int c=1; c<=5000; c++)
            {
                if(i>=cars_list[c].departure_time)
                {
                    spot_var = cars_list[c].car_assignedSpotNumber;

                    spot_loc[spot_var].carIdOccupyThisSpot = cars_list[c].car_id;

                    spot_loc[spot_var].occupied= -1;

                    int job_var = cars_list[c].job_number;

                    jobs[job_var].assigned = false; //if the car leaves we will un assign the job

                    cars_list[c].car_assignedSpotNumber = -1;

                    cars_list[c].busy=false;


                }


                // assigning new cars to the parking lot
                if( c>=2561 && cars_list[c].carArrivalTime == i && cars_list[c].car_assignedSpotNumber == -1 && cars_list[c].turned_away != 1){
                    for (int s=1; s<=2560; s++){
                        if (spot_loc[s].occupied == -1 ){
                            cars_list[c].car_assignedSpotNumber = spot_loc[s].spot_id;
                            spot_loc[s].carIdOccupyThisSpot=cars_list[c].car_id;
                            spot_loc[s].occupied = 1;
                            cars_list[c].turned_away = 0;
                            cars_list[c].busy=false;
                            break;
                        }
                        else{
                            cars_list[c].turned_away = 1;

                        }

                    }
                }

                //VM Migration: if residency time of the car is less than the job durationjob duration of that car; it means that the job may fail
                //so we will migrate the job within 10 mins before the car leaves
                int job_num_var = cars_list[c].job_number;

                if ( cars_list[c].nojobsmigrated==false && cars_list[c].timeSpenInThePlant < jobs[job_num_var].job_duration &&  i >= cars_list[c].departure_time - 10 && cars_list[c].car_assignedSpotNumber != -1){

                    //find the car with highest residency time
                    int temp_car_num_for_migration= max_residency_not_busy_car(i);

                    if (temp_car_num_for_migration != -1){
                        System.out.println( "we migrated this job number " + job_num_var +" to car number " + temp_car_num_for_migration + " at time " +i );
                        //migrate the job
                        cars_list[temp_car_num_for_migration].job_number= job_num_var;
                        cars_list[temp_car_num_for_migration].busy=true;
                        jobs[job_num_var].assigned=true;
                        cars_list[c].nojobsmigrated=true;
                        jobs[job_num_var].car_id=temp_car_num_for_migration;
                        jobs[job_num_var].migrated_successfully = 2;

                    }
                    else if (temp_car_num_for_migration == -1){

                        System.out.println( "we failed to migrate this job number " + job_num_var + " at time" + i );
                        jobs[job_num_var].migrated_successfully = 3;
                    }

                }



            }


            // Set the status of the jobs if it is finished successully.
            for(int j=1; j<=2560; j++)
            {


                if (jobs[j].job_duration_remained <= 0){
                    jobs[j].completed=true;
                    int temp_car_number = jobs[j].car_id;
                    cars_list[temp_car_number].busy=false;
                }

                if (jobs[j].assigned==true && jobs[j].completed==false)
                    jobs[j].job_duration_remained--;


                int jobremained = (int)(jobs[j].job_duration_remained);
                int jobdur = (int)((jobs[j].job_duration)/2);
                if ( jobremained == jobdur  ){
                    int car_number_of_this_job =  jobs[j].car_id;
                    int spot_number_of_this_job = cars_list[car_number_of_this_job].car_assignedSpotNumber;
                    int cluster_number_of_this_job = spot_loc[spot_number_of_this_job].cluster_number;
                    // outTest<<"Spot number of current job: "<<spot_number_of_this_job<<endl;

                    System.out.println( "************************************cluster_number_of_this_job******************" + cluster_number_of_this_job);


                    for (int cc=1 ; cc <= 5000 ; cc++){

                        int spot_number_of_this_car = cars_list[cc].car_assignedSpotNumber;
                        int GC_number_of_this_car = spot_loc[spot_number_of_this_car].group_center_number;
                        int cluster_number_of_this_car = spot_loc[spot_number_of_this_car].cluster_number;
                        if((cluster_number_of_this_car == cluster_number_of_this_job) && spot_loc[spot_number_of_this_car].occupied!=-1){   /// change this if statement to find a car that is has the biggest residency time

                            //outTest <<  "spot_number_of_this_car-1:  " << spot_number_of_this_car << endl ;
                            jobs[j].data1_car_number =  max_departure(spot_number_of_this_car,spot_number_of_this_job);

                            //jobs_list[j].calculate_data_replication_time_to_same_cluster();
                            //jobs_list[j].calculate_data_replication_time_to_same_region_different_cluster();


                            System.out.println("Car number: "+car_number_of_this_job+" belonging to spot number: "+spot_number_of_this_job+" and cluster number: "+cluster_number_of_this_job+" is replicated to car "+jobs[j].data1_car_number+" belonging to same cluster"+" at job duration "+jobs[j].job_duration_remained);

                            int carnumber_another_cluster=generate_random_cluster_number_in_a_region(GC_number_of_this_car, spot_number_of_this_job, cluster_number_of_this_car);


                           System.out.println("Car number: "+car_number_of_this_job+" belonging to spot number: "+spot_number_of_this_job+" and cluster number: "+cluster_number_of_this_job+" is replicated to car "+carnumber_another_cluster+ " at job duration "+jobs[j].job_duration_remained);

                            break;


                        }

                    }

                }

            }

            for(int sss=1 ; sss<=2560; sss++){
                int temp_carIdOccupyThisSpot = spot_loc[sss].carIdOccupyThisSpot;
                System.out.println("At time: " + i + " Spot " + sss + " is occupied by Car number " + spot_loc[sss].carIdOccupyThisSpot );
                //" having job number " << cars_list[temp_carIdOccupyThisSpot].job_number <<
                //" cars_list["<< temp_carIdOccupyThisSpot << "].car_assignedSpotNumber " <<cars_list[temp_carIdOccupyThisSpot].car_assignedSpotNumber  <<  endl;
            }

        }
        // This is to check the jobs passed and failed for car and its respective output is generated.
        System.out.println("These are the jobs that might fail if we don't do the migration" );
        System.out.println( "These are the jobs that will possibly succeed" );
        for(int k=1; k<=2560;k++)
        {
            //cout<<"job duration: "<<jobs_list[k].job_duration<<"timeSpenInThePlant: "<<cars_list[k].timeSpenInThePlant<<endl;
            if(jobs[k].job_duration > cars_list[k].timeSpenInThePlant)
            {
                jobfailCounter++;
                cars_list[k].failedJobCarToString();

            }
            else
            {
                jobPassCounter++;
                cars_list[k].SuccessJobCarToString();

            }

        }


        for (int i=1 ; i <= 7680; i++){

            if (jobs[i].migrated_successfully == 2){
                jobsmigratedsuccessfully++;
            }

            if (jobs[i].migrated_successfully == 3){
                jobsfailedtomigrate++;
            }

            if (cars_list[i].turned_away == 1) {
                failedToFindParking++;
                System.out.println("car number " + cars_list[i].car_id + " got turned away" );

            }

            if ( jobs[i].completed == true){
                jobscompleted++;
            }
        }

        System.out.println( "Total Cars turned away : "+failedToFindParking);
        System.out.println( "Count of jobs migrated successfully " + jobsmigratedsuccessfully );
        System.out.println( "Count of jobs failed to be migrated " + jobsfailedtomigrate );
        System.out.println("Job failed count: "+jobfailCounter);
        System.out.println( "Job Pass Count: "+jobPassCounter);
        System.out.println("Total of jobs completed: " + jobscompleted );


    }

    public void RegionCenter1()
    {

        //For Region1

        for(int i=1;i<=640;i++)
        {
            if( i <= 160)
            {
                if( i <= 40 )
                {
                    spot_loc[i].parkingSpots(i,1,1,1,1);
                }

                if( i > 40  && i <= 80 )
                {
                    spot_loc[i].parkingSpots(i,2,1,1,1);
                }

                if( i > 80 && i <= 120 )
                {
                    spot_loc[i].parkingSpots(i,3,1,1,1);
                }

                if( i > 120 && i <= 160 )
                {
                    spot_loc[i].parkingSpots(i,4,1,1,1);

                }
            }

            if( i > 160 && i <= 320)
            {
                if( i > 160 && i <= 200 )
                {
                    spot_loc[i].parkingSpots(i,5,1,2,1);
                }

                if( i > 200  && i <= 240 )
                {
                    spot_loc[i].parkingSpots(i,6,1,2,1);
                }

                if( i > 240 && i <= 280 )
                {
                    spot_loc[i].parkingSpots(i,7,1,2,1);
                }

                if( i > 280 && i <= 320 )
                {
                    spot_loc[i].parkingSpots(i,8,1,2,1);

                }
            }

            if( i > 320 && i <= 480)
            {
                if( i > 320 && i <= 360 )
                {
                    spot_loc[i].parkingSpots(i,9,1,3,1);
                }

                if( i > 360  && i <= 400 )
                {
                    spot_loc[i].parkingSpots(i,10,1,3,1);
                }

                if( i > 400 && i <= 440 )
                {
                    spot_loc[i].parkingSpots(i,11,1,3,1);
                }

                if( i > 440 && i <= 480 )
                {
                    spot_loc[i].parkingSpots(i,12,1,3,1);

                }
            }

            if( i > 480 && i <= 640)
            {
                if( i > 480 && i <= 520 )
                {
                    spot_loc[i].parkingSpots(i,13,1,4,1);
                }

                if( i > 520  && i <= 560 )
                {
                    spot_loc[i].parkingSpots(i,14,1,4,1);
                }

                if( i > 560 && i <= 600 )
                {
                    spot_loc[i].parkingSpots(i,15,1,4,1);
                }

                if( i > 600 && i <= 640 )
                {
                    spot_loc[i].parkingSpots(i,16,1,4,1);

                }
            }
        }

    }

    public void RegionCenter2()
    {

        //For Region2

        for(int i=641;i<=1280;i++)
        {
            if( i <= 800)
            {
                if( i <= 680 )
                {
                    spot_loc[i].parkingSpots(i,17,2,5,1);
                }

                if( i > 680  && i <= 720 )
                {
                    spot_loc[i].parkingSpots(i,18,2,5,1);
                }

                if( i > 720 && i <= 760 )
                {
                    spot_loc[i].parkingSpots(i,19,2,5,1);
                }

                if( i > 761 && i <= 800 )
                {
                    spot_loc[i].parkingSpots(i,20,2,5,1);

                }
            }

            if( i > 800 && i <= 960)
            {
                if( i > 800 && i <= 840 )
                {
                    spot_loc[i].parkingSpots(i,21,2,6,1);
                }

                if( i > 840  && i <= 880 )
                {
                    spot_loc[i].parkingSpots(i,22,2,6,1);
                }

                if( i > 880 && i <= 920 )
                {
                    spot_loc[i].parkingSpots(i,23,2,6,1);
                }

                if( i > 920 && i <= 960 )
                {
                    spot_loc[i].parkingSpots(i,24,2,6,1);

                }
            }

            if( i > 960 && i <= 1120)
            {
                if( i > 960 && i <= 1000 )
                {
                    spot_loc[i].parkingSpots(i,25,2,7,1);
                }

                if( i > 1000  && i <= 1040 )
                {
                    spot_loc[i].parkingSpots(i,26,2,7,1);
                }

                if( i > 1040 && i <= 1080 )
                {
                    spot_loc[i].parkingSpots(i,27,2,7,1);
                }

                if( i > 1080 && i <= 1120 )
                {
                    spot_loc[i].parkingSpots(i,28,2,7,1);

                }
            }

            if( i > 1120 && i <= 1280)
            {
                if( i > 1120 && i <= 1160 )
                {
                    spot_loc[i].parkingSpots(i,29,2,8,1);
                }

                if( i > 1160  && i <= 1200 )
                {
                    spot_loc[i].parkingSpots(i,30,2,8,1);
                }

                if( i > 1200 && i <= 1240 )
                {
                    spot_loc[i].parkingSpots(i,31,2,8,1);
                }

                if( i > 1240 && i <= 1280 )
                {
                    spot_loc[i].parkingSpots(i,32,2,8,1);

                }
            }
        }

    }

   public  void RegionCenter3()
    {

        //For Region3

        for(int i=1281;i<=1920;i++)
        {
            if( i <= 1440)
            {
                if( i <= 1320 )
                {
                    spot_loc[i].parkingSpots(i,33,3,9,1);
                }

                if( i > 1320  && i <= 1360 )
                {
                    spot_loc[i].parkingSpots(i,34,3,9,1);
                }

                if( i > 1360 && i <= 1400 )
                {
                    spot_loc[i].parkingSpots(i,35,3,9,1);
                }

                if( i > 1400 && i <= 1440 )
                {
                    spot_loc[i].parkingSpots(i,36,3,9,1);

                }
            }

            if( i > 1440 && i <= 1600)
            {
                if( i > 1440 && i <= 1480 )
                {
                    spot_loc[i].parkingSpots(i,37,3,10,1);
                }

                if( i > 1480  && i <= 1520 )
                {
                    spot_loc[i].parkingSpots(i,38,3,10,1);
                }

                if( i > 1520 && i <= 1560 )
                {
                    spot_loc[i].parkingSpots(i,39,3,10,1);
                }

                if( i > 1560 && i <= 1600 )
                {
                    spot_loc[i].parkingSpots(i,40,3,10,1);

                }
            }

            if( i > 1600 && i <= 1760)
            {
                if( i > 1600 && i <= 1640 )
                {
                    spot_loc[i].parkingSpots(i,41,3,11,1);
                }

                if( i > 1640  && i <= 1680 )
                {
                    spot_loc[i].parkingSpots(i,42,3,11,1);
                }

                if( i > 1680 && i <= 1720 )
                {
                    spot_loc[i].parkingSpots(i,43,3,11,1);
                }

                if( i > 1720 && i <= 1760 )
                {
                    spot_loc[i].parkingSpots(i,44,3,11,1);

                }
            }

            if( i > 1760 && i <= 1920)
            {
                if( i > 1760 && i <= 1800 )
                {
                    spot_loc[i].parkingSpots(i,45,3,12,1);
                }

                if( i > 1800  && i <= 1840 )
                {
                    spot_loc[i].parkingSpots(i,46,3,12,1);
                }

                if( i > 1840 && i <= 1880 )
                {
                    spot_loc[i].parkingSpots(i,47,3,12,1);
                }

                if( i > 1880 && i <= 1920 )
                {
                    spot_loc[i].parkingSpots(i,48,3,12,1);

                }
            }
        }

    }

    public void RegionCenter4()
    {

        //For Region4

        for(int i=1921;i<=2560;i++)
        {
            if( i <= 2080)
            {
                if( i <= 1960 )
                {
                    spot_loc[i].parkingSpots(i,49,4,13,1);
                }

                if( i > 1960  && i <= 2000 )
                {
                    spot_loc[i].parkingSpots(i,50,4,13,1);
                }

                if( i > 2000 && i <= 2040 )
                {
                    spot_loc[i].parkingSpots(i,51,4,13,1);
                }

                if( i > 2040 && i <= 2080 )
                {
                    spot_loc[i].parkingSpots(i,52,4,13,1);

                }
            }

            if( i > 2080 && i <= 2240)
            {
                if( i > 2080 && i <= 2120 )
                {
                    spot_loc[i].parkingSpots(i,53,4,14,1);
                }

                if( i > 2120  && i <= 2160 )
                {
                    spot_loc[i].parkingSpots(i,54,4,14,1);
                }

                if( i > 2160 && i <= 2200 )
                {
                    spot_loc[i].parkingSpots(i,55,4,14,1);
                }

                if( i > 2200 && i <= 2240 )
                {
                    spot_loc[i].parkingSpots(i,56,4,14,1);

                }
            }

            if( i > 2240 && i <= 2400)
            {
                if( i > 2240 && i <= 2280 )
                {
                    spot_loc[i].parkingSpots(i,57,4,15,1);
                }

                if( i > 2280  && i <= 2320 )
                {
                    spot_loc[i].parkingSpots(i,58,4,15,1);
                }

                if( i > 2320 && i <= 2360 )
                {
                    spot_loc[i].parkingSpots(i,59,4,15,1);
                }

                if( i > 2360 && i <= 2400 )
                {
                    spot_loc[i].parkingSpots(i,60,4,15,1);

                }
            }

            if( i > 2400 && i <= 2560)
            {
                if( i > 2400 && i <= 2440 )
                {
                    spot_loc[i].parkingSpots(i,61,4,16,1);
                }

                if( i > 2440  && i <= 2480 )
                {
                    spot_loc[i].parkingSpots(i,62,4,16,1);
                }

                if( i > 2480 && i <= 2520 )
                {
                    spot_loc[i].parkingSpots(i,63,4,16,1);
                }

                if( i > 2520 && i <= 2560 )
                {
                    spot_loc[i].parkingSpots(i,64,4,16,1);

                }
            }
        }

    }




}
